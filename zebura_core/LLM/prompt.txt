///////////////////////////////////////
// The BASE prompt for all languages
// format：<TASK: xxx> ... </TASK>
// ignore lines starting with '//'
// Tasklist: ['column_description', 'column_grouping', 'column_hypernym', 'data_exploration', 'db_description', 'db_glossary','fups4db', 'nl_to_sql', 'rewrite', 'scn4db', 'sql4db', 'sql_breakdown', 'sql_details', 'sql_revise','tables_choose', 'tb_classification', 'term_expansion', 'term_normalization', 'translation']
////////////////////////////////////////

// 给表和列名生成描述
<TASK:column_description>

### Task Description:
Given a database table's column information, generate a brief description of the table and each column using {chat_lang}.

### Requirements:
- The description should be brief, using a short sentence or keywords to convey the column's function, purpose, and aliases. 
- Output the results in JSON format, including the column name and its corresponding description.  

### Input:
{tb_info}

### Output:
```json
{{
  "table_description": "A brief summary of the table's purpose and content.",
  "columns": [
    {{
      "column_name": "column1",
      "description": "description1"
    }},
    {{
      "column_name": "column2",
      "description": "description2"
    }}
  ]
}}  

</TASK>


<TASK:column_grouping>
### Task Description:
你是一个数据库架构分析专家。给定一组数据库表及其字段的 schema 信息，你的任务是对这些字段进行分类，将功能或描述内容相似的字段归为同一组，并为每个组提供一个合适的组名。

### Requirements:
- 语义相似性分析：按字段的类型、实际功能或描述内容进行合理分组，而不仅仅是名称相似。
- 组名清晰：组名要简洁且能够准确概括组内字段的意义。

### Input:
{column_info}

### Output:
```json
[
  {{
      "group_name": "group1",
      "columns": ["column1", "column2", "column3"]
  }},
  {{
      "group_name": "group2",
      "columns": ["column4", "column5"]
  }}
]
```
</TASK>

// 给表的一个列名信息增加上位词
<TASK:column_hypernym>
### Task Description:
Assigning hypernyms to a given set of database column names.
Given a set of column names from database tables and a list of hypernyms, iterate through each column name and find the hypernym that best fits the logical design of a typical database schema.

### Instructions:
You will be provided with a set of column names from database tables and a predefined list of hypernyms. Your task is to iterate through each column name and determine the most appropriate hypernym based on typical database schema design.

### Requirements:
- Every column must be assigned a hypernym from the given list.
- If a column name matches multiple hypernyms, select the one that best aligns with logical database design. 
- Output the results in JSON format, including the column name and its assigned hypernym.  

### Input:

- **Hypernym List**: A set of high-level concept words for classifying database column names.  
  {hypernym_list} 

- **Column Schema**: Detailed information about database columns, including table name, column names, data types, and samples.  
  {column_info} 

### Output:

```json
[
  {{
    "column_name": "column1",
    "assigned_hypernym": "hypernym1"
  }},
  {{
    "column_name": "column2",
    "assigned_hypernym": "hypernym2"
  }}
]
```

</TASK>


<TASK:data_exploration>
### Task Description:
You are given the schema of a database table, an SQL query, and its result. Your task is to infer what aspects of the database table the user might be interested in and generate several natural language questions. Consider the following scenarios:
- If the result is empty, generate several broader natural language query suggestions to help the user adjust the query conditions and obtain meaningful results.
- If the query has results, analyze the data and conditions in the query to infer possible interests or follow-up questions the user might have.

### Requirements:
Please strictly follow the JSON format of the output example. not trailing commas in the JSON object.

### Output Example:
```json
{{
  "actions": [
    "<suggesion1>",
    "<suggesion2>"
  ],
  "questions": [
    "<question1>",
    "<question2>"
  ]
}}
```


### Input:
** Database Schema: **
{db_info}
** SQL Query: **
{sql_query}
** SQL Query result: **
{sql_result}

### Output:
</TASK>

// 生成database的描述
<TASK:db_description>
### Task Description:

You are an expert in database schema analysis. Given a database named {db_name} and grouped information about its tables, your task is to analyze and generate a concise description of the database. Since there are many tables, the input provides only a grouped overview of table functionalities and application scenarios, along with high-level details about column names for tables within the same group. Based on this information, you need to generate a brief summary of the database in {chat_lang}.

### Requirements:
- The generated description should be clear and concise, summarizing the main functionalities and application scenarios of the database.
- The output should be in JSON format, including the database name and its description.

### Input:
{db_info}

### Output:
```json
{{
  "database_name": "database_name",
  "description": "A brief description of the database's main functions and application scenarios."
}}
```
</TASK>

// follow-ups questions for the database
<TASK:fups4db>
### Task Description:
Generate follow-up questions and their corresponding SQL queries based on a given SQL query, database table description, and sample records. The questions should be clear, written in natural language, and explore related aspects of the query or database structure.

### Requirements:
1. Generate follow-up questions in {chat_lang}.
2. Output the results in JSON format, strictly following the provided output example.

### Input:
- **Table description:**
  {tb_prompt}

- **Sample records:**
  {sample_records}

- **Initial SQL Query:**
  {sql_query}

- **Query result:**
  {sql_result}

### Output Example:

```json
[
  {{
    "question": question_text1,
    "sql": sql_statement1
  }},
  {{
    "question": question_text2,
    "sql": sql_statement2
  }},
  {{
    "question": question_text3,
    "sql": sql
  }}
]
```
</TASK>

// generate SQL query based on natural language input and database schema
<TASK:nl_to_sql>
### Task Description:
Generate an SQL query based on a user's natural language input and a provided database schema. The output must include a comprehensive breakdown of the SQL statement, detailing the involved tables, columns, and the values used in the WHERE clause.

### Requirements:
Please strictly follow the JSON format of the output example. Ensure that the JSON is syntactically correct and does not contain any extra commas after the last element in arrays or objects.

### Output Example:
```json
{{
  "sql": "sql statement",
  "tables": [
    {{"name": "table_name1", 
      "alias": "t1"
    }},
    {{"name": "table_name2", "alias": "t2"}}
  ],
  "columns": [
    {{"name": "column_name1", "table": "table_name1", "alias": "c1"}},
    {{"name": "column_name2", "table": "table_name1"}},
    {{"name": "column_name3", "table": "table_name1"}},
    {{"name": "column_name4", "table": "table_name2"}},
    {{"name": "column_name5", "table": "table_name2", "alias": "c5"}}
  ],
  "values": [
    {{"value": "value1", "column": "column_name1", "table": "table_name1"}},
    {{"value": number1, "column": "column_name2", "table": "table_name1"}}
  ]
}}

### Input:
** User Query: **
{question}
** Database Schema: **
{db_info}
** Text-to-SQL Examples with json format: **
{examples}

### Output:

</TASK>

// 将多轮对话，重写为一条查询语句
<TASK:rewrite>
During a conversation, when a user asks data-related questions and the agent should provide the corresponding data analysis based on the user's intent. If the requested data cannot be located, the agent will prompt the user for more specific details.
When rewriting the user's follow-up message into a detailed, standalone data-related question, ensure the following:
1. Maintain the original intent of the follow-up message.
2. Phrase the conversation directly as a data-related question with the user seeking answers, not the agent seeking clarification.
3. Incorporate relevant specifics about tables, fields, and query conditions previously discussed in the conversation, to supplement any missing data details in the user's original query.
4. If the original message is casual or unclear in intent, retain the original sentence without modification.
5. Keep the length of the rewritten question similar to the original to preserve its intent.
6. Focus on referencing the details from the user's historical questions rather than the agent's responses when constructing the query.

Examples of Refined Standalone Question:
1. Find all customers located in Germany
2. Get all product details and sort them by name
3. Retrieve the first 5 customers who registered in 2021

Conversation History (Sorted by request time from most recent to oldest):
{history_context}

Follow Up Input: 
user: {query}

**NOTE**: DO NOT prompt the user for additional specific information.
Refined Standalone Question:
</TASK>

// list some sapplication scenarios for this database
<TASK:scn4db>
### Task Description:
Given a database schema, list application scenarios where this database can be used to generate reports, along with the target user groups for these reports. The scenarios should cover diverse application areas and user needs, showcasing the database's versatility and practical value.

### Requirements:
1. Identify at least {num_scenarios} distinct application scenarios or use cases.
2. Output the result in JSON format, strictly following the provided output format.

### Input:
- **Table description:**
  {tb_prompt}

- **Sample records:**
  {sample_records}

### Output format:
```json
[
  {{
    "scenario": "scenario_text1",
    "description": "description_text1",
    "target_users": ["userA", "userB"]
  }},
  {{
    "scenario": "scenario_text2",
    "description": "description_text2",
    "target_users": ["userC", "userD", "userE"]
  }}
]
```

</TASK>

// generate natural language questions from database schema
<TASK:sql4db>
### Task Description:
Generate natural language questions based on the provided database table description and sample records. These questions should reflect the {target_users}' interests within the context of {scenario}.

### Requirements:
1. Generate at least {num_questions} the natural language questions in {chat_lang}.
2. Questions should cover the following aspects:
  - Data content
  - Data purpose
  - Statistical or trend analysis
3. Ensure the questions are closely related to the provided table structure and records.
4. The questions must align with their corresponding SQL queries.
5. Output the results in JSON format, strictly following the provided output example.

### Input:
- **Table description:**
  {tb_prompt}

- **Sample records:**
  {sample_records}

### Output Example:
```json
[
  {{
    "question": question_text1,
    "sql": sql_statement1
  }},
  {{
    "question": question_text2,
    "sql": sql_statement2
  }},
  {{
    "question": question_text3,
    "sql": sql
  }}
]
```
</TASK>

// analyse the complex SQL
<TASK:sql_breakdown>
### Task Description:
Analyze the input SQL statement and provide a detailed breakdown of the tables, columns, and values used in the SQL statement.

1. **Tables:** List all the tables in the SQL statement, including their aliases if they exist.
2. **Columns:** List all the columns used in the SQL statement, along with their corresponding tables. Include the column aliases if they exist.
3. **Values:** Extract all values from the WHERE clause, along with the columns and tables they are associated with.

### Notes:
- Please strictly follow the JSON format of the below output example.
- Replace all single quotes (') with double quotes (") in the values within the SQL statement.
=========================


```json
{{ 
  "tables": [  
    {{"name": "table1", "alias": "t1"}},  
    {{"name": "table2", "alias": "t2"}}  
  ],  
  "columns": [  
    {{"name": "column1", "table": "table1", "alias": "c1"}},  
    {{"name": "column2", "table": "table1"}},  
    {{"name": "column3", "table": "table2"}}  
  ],  
  "values": [  
    {{"value": number1, "column": "column1", "table": "table1"}},  
    {{"value": "string1", "column": "column2", "table": "table2"}}  
  ]  
}}

```
=========================
### Input SQL Statement:
{sql_statement}

### Output:

</TASK>

// 改写SQL使输出结果包含更多详情信息
<TASK:sql_details>
## Task: Optimize SQL Query for Enhanced Data Details

### Objective
Rewrite the given SQL query to include more comprehensive data, ensuring the results are intuitive and informative.

### Guidelines:
1. **Expand Data**: 
    - Ensure fields from the WHERE clause are included in the SELECT clause. 
    - When using aggregate functions (e.g., COUNT, SUM), use the GROUP BY clause for accurate results.
   
2. **Improve Clarity**: 
    - Use aliases for clear column names.
    - Format numeric or date fields as needed.
    - Ensure key details are easily accessible at a glance.

3. **Output**: The output must be an SQL query that includes the enhanced data.

### Input Example (Original SQL Query):
SELECT customer_id, order_date, total_amount
FROM orders
WHERE order_date > '2023-01-01';

### Output Example (Rewritten SQL Query with Additional Details):
SELECT order_id AS "Order ID", 
       order_date AS "Order Date", 
       total_amount AS "Total Amount", 
       customer_name AS "Customer Name"
FROM orders
WHERE order_date > '2023-01-01'
ORDER BY order_date DESC;

======================

### Database schema:
{dbSchema}

### Input Original SQL Query:
{sql_statement}

### Output Rewritten SQL Query:
</TASK>

// recorrect the SQL query
<TASK:sql_revise>
### Task Description:
You are an SQL programming expert specializing in diagnosing and correcting errors in SQL queries. Your task involves correcting SQL queries by addressing errors such as non-existent column or table names, JOIN operation issues, number or date format errors, and discrepancies in WHERE clause values. The corrected SQL should execute successfully while preserving the original query's intent. 

### Requirements:
- Correct the SQL query by addressing the errors mentioned.
- Use the 'LIKE' operator instead of '=' operator. 
- Preserve Query Intent: Ensure that corrections do not alter the intended functionality of the query.
- Please strictly follow the format of the output example.

### Output example：
```sql
SELECT e.employee_id, e.first_name, e.last_name, d.department_name
FROM Employees e
JOIN Departments d ON e.department_id = d.department_id;
```
### Input:
- Database Schema:
{dbSchema}

- Original SQL：
{ori_sql}

- Existing issues:
{err_msgs}

### Output:

</TASK>

// Select the database tables required for the query
<TASK:tables_choose>
### Task Description:
Given the descriptions of multiple database tables and a natural language sentence, determine whether the sentence is a query related to the database. 
If it is, select one or more relevant database table names. 
If not, handle it as a chat and generate a response in {chat_lang}.

### Requirements:
Please strictly follow the JSON format of the output example.

### Output example:

1. **If the input is a query related to the database:**
```json
{{
  "tables": ["table name1", "table name2"]
}}
```
2. **If the input is unrelated to the given database:**
```json
{{
  "chat": "<response1>"
}}
```

### Input: 

** Natural Language Sentence: **
{question}
** Database Schema: **
{db_info}

### Output:
</TASK>

// 根据以有的组和标签体系，对一个表进行分组和打标签
<TASK:tb_classification>
### Task Description  
Use the list of group names and the list of tag names to group the database table and assign tags.

### Input
- List of group names:
{group_info} 
- List of tag names: 
{tag_info}  
- Database Table: 
{table_info}  

### Requirements 
- Each database table must be assigned to one group and at least one tag.
- The output must strictly follow the example format.

### Output example:
```json
{{
    "table_name": "table_name",
    "group": "group_name",
    "tags": ["tag1", "tag2",...]
}}
```
</TASK>

// glossary for grouping and tagging of database tables
<TASK:db_glossary>

### Task Description:
You are provided with a database named {db_name} and several tables within the database. Each table consists of its name and a list of fields. Your task is to construct a glossary for both groups and tags based on this information. Additionally, you need to assign each table to a specific group and associate it with multiple tags.

### Database Table Information:
{tables_info}

### Requirements:
- Each table should belong to one group only, but can have multiple tags.
- The output must strictly follow the example format.

### Output example:
```json
{{
  "tables": [
    {{
      "table_name": "table1",
      "group": "group1",
      "tags": ["tag1", "tag2"]
    }},
    {{
      "table_name": "table2",
      "group": "group2",
      "tags": ["tag3", "tag4"]
    }}
  ],
  "groups": [
    {{
      "group_name": "group1",
      "description": "Description of group 1."
    }},
    {{
      "group_name": "group2",
      "description": "Description of group 2."
    }}
  ],
  "tags": [
    {{
      "tag_name": "tag1",
      "description": "Description of tag 1."
    }},
    {{
      "tag_name": "tag2",
      "description": "Description of tag 2."
    }}
  ]
}}

```
</TASK>

//
<TASK:term_expansion>
### Task Description:
Generate term expansions for the given terms based on the table below. Use methods such as synonyms, related terms, and translations to enrich the vocabulary while ensuring relevance to the specified category.

### Requirements:
- Expand terms using synonyms, related terms, and translations.
- Ensure the generated JSON strictly follows the provided output structure.
- Keep expansions relevant to the term’s specified category and language.

**Input Example Table:**  

| Term       | Category       | Output Language |  
|:-----------|:---------------|:----------------|  
| apple      | Brand          | English         |  
| mouse      | Product_name   | Chinese         |  
| innovation | Business       | Japanese        |  


**Expected Output:**  

```json
[
  {{
    "term": "apple",
    "category": "Brand",
    "language": "English",
    "expansions": ["MacBook", "iPhone", "iPad", "Apple Inc.", "AirPods", "Apple Watch"]
  }},
  {{
    "term": "mouse",
    "category": "Product_name",
    "language": "Chinese",
    "expansions": ["鼠标", "无线鼠标", "光学鼠标", "游戏鼠标", "蓝牙鼠标"]
  }},
  {{
    "term": "innovation",
    "category": "Business",
    "language": "Japanese",
    "expansions": ["イノベーション", "技術革新", "創意", "発明", "新興ビジネス"]
  }}
]

```
**Input Table:** 
{term_table}

**Output:**

</TASK>

// 术语归一化，包括类别,tag， 字段名分组
<TASK: term_normalization>

### Task Description:
Given a set of terms with their descriptions, group the terms that share the same meaning or function, and assign a standard name to each group. The total number of standard terms should be between 1 and {max_cats}.

### Requirements:
- Each standard term must include at least one original term.
- Provide a description for each standard term.
- The output should be in JSON format, strictly following the provided output example.

### Input:
- A list of terms with descriptions
{catInfo}

### Output example:
```json
[
    {{
        "standard_term": "standard_term1",
        "original_terms": ["term1", "term2"],
        "description": "" // Description for standard_term1
    }},
    {{
        "standard_term": "standard_term2",
        "original_terms": ["term3", "term4"],
        "description": ""     // Description for standard_term2
    }},
    {{
        "standard_term": "standard_term3",
        "original_terms": ["term5"],
        "description": "" // Description for standard_term3
    }}
]
```
</TASK>


<TASK:translation>
### Task Description:
Translate the following JSON object into English. The JSON contains a text and its language. Translate only the text to {trgt_lang} and return the result in JSON format
### Requirements:
Please strictly follow the JSON format of the provided output example.

### Input Example:
[
  {{
    "text": "你好，世界",
    "language": "Chinese"
  }},
  {{
    "text": "Bonjour le monde",
    "language": "French"
  }}
]
### Output Example:

```json
[
  {{
    "source": "你好，世界",
    "target": "Hello, world"
  }},
  {{
    "source": "Bonjour le monde",
    "target": "Hello, world"
  }}
]
```
### Input:
{input}

### Output:
</TASK>

