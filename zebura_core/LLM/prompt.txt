///////////////////////////////////////
// The MAIN version, taskname and output format in all other languages' version should remain consistent.
// prompt template， format：<TASK: xxx> ... </TASK>
// ignore lines starting with '//'
// NOTE: Modifying the format of taskname and output format will affect ans_extractor.py

<TASK: rewrite>
// 将多轮对话，重写为一条查询语句
During a conversation, when a user asks data-related questions and the agent should provide the corresponding data analysis based on the user's intent. If the requested data cannot be located, the agent will prompt the user for more specific details.
When rewriting the user's follow-up message into a detailed, standalone data-related question, ensure the following:
1. Maintain the original intent of the follow-up message.
2. Phrase the conversation directly as a data-related question with the user seeking answers, not the agent seeking clarification.
3. Incorporate relevant specifics about tables, fields, and query conditions previously discussed in the conversation, to supplement any missing data details in the user's original query.
4. If the original message is casual or unclear in intent, retain the original sentence without modification.
5. Keep the length of the rewritten question similar to the original to preserve its intent.
6. Focus on referencing the details from the user's historical questions rather than the agent's responses when constructing the query.

Examples of Refined Standalone Question:
1. Find all customers located in Germany
2. Get all product details and sort them by name
3. Retrieve the first 5 customers who registered in 2021

Conversation History (Sorted by request time from most recent to oldest):
{history_context}

Follow Up Input: 
user: {query}

**NOTE**: DO NOT prompt the user for additional specific information.
Refined Standalone Question:
</TASK>

//
<TASK: term_expansion>
### Task Description:
Generate term expansions for the given terms based on the table below. Use methods such as synonyms, related terms, and translations to enrich the vocabulary while ensuring relevance to the specified category.

### Requirements:
- Expand terms using synonyms, related terms, and translations.
- Ensure the generated JSON strictly follows the provided output structure.
- Keep expansions relevant to the term’s specified category and language.

**Input Example Table:**  

| Term       | Category       | Output Language |  
|:-----------|:---------------|:----------------|  
| apple      | Brand          | English         |  
| mouse      | Product_name   | Chinese         |  
| innovation | Business       | Japanese        |  


**Expected Output:**  

```json
[
  {{
    "term": "apple",
    "category": "Brand",
    "language": "English",
    "expansions": ["MacBook", "iPhone", "iPad", "Apple Inc.", "AirPods", "Apple Watch"]
  }},
  {{
    "term": "mouse",
    "category": "Product_name",
    "language": "Chinese",
    "expansions": ["鼠标", "无线鼠标", "光学鼠标", "游戏鼠标", "蓝牙鼠标"]
  }},
  {{
    "term": "innovation",
    "category": "Business",
    "language": "Japanese",
    "expansions": ["イノベーション", "技術革新", "創意", "発明", "新興ビジネス"]
  }}
]

```
**Input Table:** 
{term_table}

**Output:**

</TASK>

// summary of database
<TASK: db_summary>
Below is information about a database, including the tables and their schemas. Please provide a clear and concise summary in {chat_lang} to help the user understand the database. While the goal is to stay within a {limit_length}-word limit, the summary must include table names and key columns, even if it exceeds this limit. Ensure that related tables are grouped together for easier comprehension.
=========================
Input:
{db_info}
</TASK>

// grouping and tagging database tables
<TASK: tb_grouping>
### Task Description:
给定一个名为{db_name}的数据库，其中存放着一些数据表。 每个表包含表名及其字段列表。 请根据这些信息，对数据表进行分组，使保存相似信息或有相似应用场景的表归为一组，并且对每个表提供2-3个简要标签，概括该表的核心功能或用途。最终输出分组信息、组的简要描述，以及每个表的标签。

### 数据库表信息：
{tables_info}

### 要求：
分组：识别表的功能或应用场景，并合理分类。
标签：为每个表提供2-3个简要标签，概括该表的核心功能或用途。
输出：严格按照提供的输出格式，输出JSON格式的分组信息和标签信息。

### Output example:
```json
{{
    "groups": [
        {{
            "group_name": "group1",
            "description": "Description of group 1.",
            "included_tables": ["table1", "table2", "table3"]
        }},
        {{
            "group_name": "group2",
            "description": "Description of group 2.",
            "included_tables": ["table4", "table5"]
        }}
    ],
    "tables": [
        {{
            "table_name": "table1",
            "tags": ["tag1", "tag2", "tag3"]
        }},
        {{
            "table_name": "table2",
            "tags": ["tag2", "tag4"]
        }},
        {{
            "table_name": "table3",
            "tags": ["tag5", "tag6"]
        }}
    ]
}}
```
</TASK>

// 名称或类别的归一化
<TASK: cat_normalization>
### Task Description:
给定一组类别名称及可选的类别描述，请将语义或功能相同的类别整合到相同的标准类别下。如果提供了描述，请结合描述信息进行更精准的归类。整合后的标准类别小于{max_cats}个。

### Requirements:
- 每个标准类别下至少包含一个原始类别。

### Input:
{catInfo}

### Output:
```json
[
    {{
        "standard_category": "standard_category1",
        "original_categories": ["category1", "category2"],
        "description": "" //填入具体的描述信息
    }},
    {{
        "standard_category": "standard_category2",
        "original_categories": ["category3", "category4"],
        "description": ""     //填入具体的描述信息
    }},
    {{
        "standard_category": "standard_category3",
        "original_categories": ["category5"],
        "description": "" //填入具体的描述信息
    }}
]
```
</TASK>

// describe a database table and its columns in natural language and explain it's purposes
<TASK: db_desc>
You are a database programming expert. Given the schema of a database table, to make the table easier to understand, please generate a concise description of the table based on its column name and column type, explaining its possible purpose. For each column in the table, provide its description and potential aliases it might use. If the column name is in a language other than {chat_lang}, translate it into {chat_lang}.The generated description should be in {chat_lang}.
=========================
Example of Input in Markdown format:
table_name: Products
| column_name     | type        |
|:----------------|:------------|
| productName     | varchar(80)  |
| price           | decimal(8,2) |
| brandName       | varchar(80)  |
| releaseTime     | datetime(3)  |

=========================
Example of Output in JSON format:
```json
{{
  "table_name": "Products",
  "table_description": "This table stores detailed information about various products in a retail or e-commerce database.",
  "columns": [
    {{
      "column_name": "productName",
      "description": "Contains the name or title of the product.",
      "translation_and_aliases": ["Product Title", "Item Name", "Product Label"]
    }},
    {{
      "column_name": "price",
      "description": "Records the price of the product, allowing values up to 999,999.99. Essential for pricing and calculations.",
      "translation_and_aliases": ["Product Price", "Cost", "Selling Price"]
    }},
    {{
      "column_name": "brandName",
      "description": "Indicates the brand or manufacturer of the product. Helps identify the origin and quality of the product.",
      "translation_and_aliases": ["Brand", "Manufacturer", "Brand Label"]
    }},
    {{
      "column_name": "releaseTime",
      "description": "Records the date and time when the product was added to the inventory or catalog. Helps track availability and shelf life.",
      "translation_and_aliases": ["Listing Date", "Availability Date", "Product Release Date"]
    }}
  ]
}}
```
=========================
NOTE: 
- please strictly follow the output format of the example above when outputting the generated content.
- The **Column** in the output must correspond one-to-one with the **Column** in the input.
=========================
INPUT:

Table_name:{table_name}
{column_info}

=========================
OUTPUT:

</TASK>

// analyse the complex SQL
<TASK: sql_breakdown>
### Task Description:
Analyze the input SQL statement and provide a detailed breakdown of the tables, columns, and values used in the SQL statement.

1. **Tables:** List all the tables in the SQL statement, including their aliases if they exist.
2. **Columns:** List all the columns used in the SQL statement, along with their corresponding tables. Include the column aliases if they exist.
3. **Values:** Extract all values from the WHERE clause, along with the columns and tables they are associated with.

### Notes:
- Please strictly follow the JSON format of the below output example.
- Replace all single quotes (') with double quotes (") in the values within the SQL statement.
=========================


```json
{{ 
  "tables": [  
    {{"name": "table1", "alias": "t1"}},  
    {{"name": "table2", "alias": "t2"}}  
  ],  
  "columns": [  
    {{"name": "column1", "table": "table1", "alias": "c1"}},  
    {{"name": "column2", "table": "table1"}},  
    {{"name": "column3", "table": "table2"}}  
  ],  
  "values": [  
    {{"value": number1, "column": "column1", "table": "table1"}},  
    {{"value": "string1", "column": "column2", "table": "table2"}}  
  ]  
}}

```
=========================
### Input SQL Statement:
{sql_statement}

### Output:

</TASK>

// 改写SQL使输出结果包含更多详情信息
<TASK: sql_details>
## Task: Optimize SQL Query for Enhanced Data Details

### Objective
Rewrite the given SQL query to include more comprehensive data, ensuring the results are intuitive and informative.

### Guidelines:
1. **Expand Data**: 
    - Ensure fields from the WHERE clause are included in the SELECT clause. 
    - When using aggregate functions (e.g., COUNT, SUM), use the GROUP BY clause for accurate results.
   
2. **Improve Clarity**: 
    - Use aliases for clear column names.
    - Format numeric or date fields as needed.
    - Ensure key details are easily accessible at a glance.

3. **Output**: The output must be an SQL query that includes the enhanced data.

### Input Example (Original SQL Query):
SELECT customer_id, order_date, total_amount
FROM orders
WHERE order_date > '2023-01-01';

### Output Example (Rewritten SQL Query with Additional Details):
SELECT order_id AS "Order ID", 
       order_date AS "Order Date", 
       total_amount AS "Total Amount", 
       customer_name AS "Customer Name"
FROM orders
WHERE order_date > '2023-01-01'
ORDER BY order_date DESC;

======================

### Database schema:
{dbSchema}

### Input Original SQL Query:
{sql_statement}

### Output Rewritten SQL Query:
</TASK>

// recorrect the SQL query
<TASK: sql_revise>
### Task Description:
You are an SQL programming expert specializing in diagnosing and correcting errors in SQL queries. Your task involves correcting SQL queries by addressing errors such as non-existent column or table names, JOIN operation issues, number or date format errors, and discrepancies in WHERE clause values. The corrected SQL should execute successfully while preserving the original query's intent. 

### Requirements:
- Correct the SQL query by addressing the errors mentioned.
- Use the 'LIKE' operator instead of '=' operator. 
- Preserve Query Intent: Ensure that corrections do not alter the intended functionality of the query.
- Please strictly follow the format of the output example.

### Output example：
```sql
SELECT e.employee_id, e.first_name, e.last_name, d.department_name
FROM Employees e
JOIN Departments d ON e.department_id = d.department_id;
```
### Input:
- Database Schema:
{dbSchema}

- Original SQL：
{ori_sql}

- Existing issues:
{err_msgs}

### Output:

</TASK>

// list some sapplication scenarios for this database
<TASK: scn4db>
### Task Description:
Given a database schema, list application scenarios where this database can be used to generate reports, along with the target user groups for these reports. The scenarios should cover diverse application areas and user needs, showcasing the database's versatility and practical value.

### Requirements:
1. Identify at least {num_scenarios} distinct application scenarios or use cases.
2. Output the result in JSON format, strictly following the provided output format.

### Input:
- **Table description:**
  {tb_prompt}

- **Sample records:**
  {sample_records}

### Output format:
```json
[
  {{
    "scenario": "scenario_text1",
    "description": "description_text1",
    "target_users": ["userA", "userB"]
  }},
  {{
    "scenario": "scenario_text2",
    "description": "description_text2",
    "target_users": ["userC", "userD", "userE"]
  }}
]
```

</TASK>
// generate natural language questions from database schema
<TASK: sql4db>
### Task Description:
Generate natural language questions based on the provided database table description and sample records. These questions should reflect the {target_users}' interests within the context of {scenario}.

### Requirements:
1. Generate at least {num_questions} the natural language questions in {chat_lang}.
2. Questions should cover the following aspects:
  - Data content
  - Data purpose
  - Statistical or trend analysis
3. Ensure the questions are closely related to the provided table structure and records.
4. The questions must align with their corresponding SQL queries.
5. Output the results in JSON format, strictly following the provided output example.

### Input:
- **Table description:**
  {tb_prompt}

- **Sample records:**
  {sample_records}

### Output Example:
```json
[
  {{
    "question": question_text1,
    "sql": sql_statement1
  }},
  {{
    "question": question_text2,
    "sql": sql_statement2
  }},
  {{
    "question": question_text3,
    "sql": sql
  }}
]
```
</TASK>
// follow-ups questions for the database
<TASK: fups4db>
### Task Description:
Generate follow-up questions and their corresponding SQL queries based on a given SQL query, database table description, and sample records. The questions should be clear, written in natural language, and explore related aspects of the query or database structure.

### Requirements:
1. Generate follow-up questions in {chat_lang}.
2. Output the results in JSON format, strictly following the provided output example.

### Input:
- **Table description:**
  {tb_prompt}

- **Sample records:**
  {sample_records}

- **Initial SQL Query:**
  {sql_query}

- **Query result:**
  {sql_result}

### Output Example:

```json
[
  {{
    "question": question_text1,
    "sql": sql_statement1
  }},
  {{
    "question": question_text2,
    "sql": sql_statement2
  }},
  {{
    "question": question_text3,
    "sql": sql
  }}
]
```
</TASK>

<TASK: translation>
### Task Description:
Translate the following JSON object into English. The JSON contains a text and its language. Translate only the text to {trgt_lang} and return the result in JSON format
### Requirements:
Please strictly follow the JSON format of the provided output example.

### Input Example:
[
  {{
    "text": "你好，世界",
    "language": "Chinese"
  }},
  {{
    "text": "Bonjour le monde",
    "language": "French"
  }}
]
### Output Example:

```json
[
  {{
    "source": "你好，世界",
    "target": "Hello, world"
  }},
  {{
    "source": "Bonjour le monde",
    "target": "Hello, world"
  }}
]
```
### Input:
{input}

### Output:
</TASK>

// Select the database tables required for the query
<TASK: tables_choose>
### Task Description:
Given the descriptions of multiple database tables and a natural language sentence, determine whether the sentence is a query related to the database. 
If it is, select one or more relevant database table names. 
If not, handle it as a chat and generate a response in {chat_lang}.

### Requirements:
Please strictly follow the JSON format of the output example.

### Output example:

1. **If the input is a query related to the database:**
```json
{{
  "tables": ["table name1", "table name2"]
}}
```
2. **If the input is unrelated to the given database:**
```json
{{
  "chat": "<response1>"
}}
```

### Input: 

** Natural Language Sentence: **
{question}
** Database Schema: **
{db_info}

### Output:
</TASK>

// generate SQL query based on natural language input and database schema
<TASK: nl_to_sql>
### Task Description:
Generate an SQL query based on a user's natural language input and a provided database schema. The output must include a comprehensive breakdown of the SQL statement, detailing the involved tables, columns, and the values used in the WHERE clause.

### Requirements:
Please strictly follow the JSON format of the output example. Ensure that the JSON is syntactically correct and does not contain any extra commas after the last element in arrays or objects.

### Output Example:
```json
{{
  "sql": "sql statement",
  "tables": [
    {{"name": "table_name1", 
      "alias": "t1"
    }},
    {{"name": "table_name2", "alias": "t2"}}
  ],
  "columns": [
    {{"name": "column_name1", "table": "table_name1", "alias": "c1"}},
    {{"name": "column_name2", "table": "table_name1"}},
    {{"name": "column_name3", "table": "table_name1"}},
    {{"name": "column_name4", "table": "table_name2"}},
    {{"name": "column_name5", "table": "table_name2", "alias": "c5"}}
  ],
  "values": [
    {{"value": "value1", "column": "column_name1", "table": "table_name1"}},
    {{"value": number1, "column": "column_name2", "table": "table_name1"}}
  ]
}}

### Input:
** User Query: **
{question}
** Database Schema: **
{db_info}
** Text-to-SQL Examples with json format: **
{examples}

### Output:

</TASK>

<TASK: data_exploration>
### Task Description:
You are given the schema of a database table, an SQL query, and its result. Your task is to infer what aspects of the database table the user might be interested in and generate several natural language questions. Consider the following scenarios:
- If the result is empty, generate several broader natural language query suggestions to help the user adjust the query conditions and obtain meaningful results.
- If the query has results, analyze the data and conditions in the query to infer possible interests or follow-up questions the user might have.

### Requirements:
Please strictly follow the JSON format of the output example. not trailing commas in the JSON object.

### Output Example:
```json
{{
  "actions": [
    "<suggesion1>",
    "<suggesion2>"
  ],
  "questions": [
    "<question1>",
    "<question2>"
  ]
}}
```


### Input:
** Database Schema: **
{db_info}
** SQL Query: **
{sql_query}
** SQL Query result: **
{sql_result}

### Output:
</TASK>
